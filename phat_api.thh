#include "string.hh"
#include "json.hh"
#include "mpfd.hh"

namespace phat {

typedef Json Handle;
typedef Json Metadata;
typedef Json Sequencer;
typedef Json Locktype;

////////////////////////////////////////////////////////////////////////////////
typedef struct {
  struct in_addr ip;
  int port;
} Server_t;

class Phat_Interface
{
private:
  std::vector<Server_t> replicas_;
  Server_t master_;
  msgpack_fd master_fd_;
  static const int DEFAULT_PHAT_PORT_ = 15810; // default, not guaranteed.

  // sets master_fd_, and possibly master_ and replicas_
  tamed void connect_to_master(const Server_t contact_point); 

  // Internal RPCs
  tamed void get_master(tamer::event<RPC_Msg> ev);
  tamed void get_replica_list(tamer::event<RPC_Msg> ev);
public:
  Phat_Interface();
  Phat_Interface(const Server_t contact_point);

  Handle getroot();
  Handle open(Handle root, const std::string subpath);
  Handle mkfile(Handle root, const std::string subpath, const char *data);
  Handle mkdir(Handle root, const std::string subpath);
  const char *getcontents(Handle h);
  void putcontents(Handle h, const char *data);
  std::string readdir(Handle h);
  Metadata stat(Handle f);
  Sequencer flock(Handle f, Locktype lt);
  Sequencer funlock(Handle f);
  void remove(Handle f);
};

} // namespace phat
